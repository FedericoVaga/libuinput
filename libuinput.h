/**
 *  @author Federico Vaga <federico.vaga@ gmail.com>
 *  @date 2013
 *  @copyright Â© 2013 Federico Vaga <federico.vaga@ gmail.com>, License: GPLv2
 *  @version 0.2
 */

#ifndef UINPUT_H
#define UINPUT_H

/**
 * It is the token generated by the library on uinput_open(). Your programs
 * must store this token and use it each time you need to access to the uinput
 * device associated to the token.
 */
struct uinput_tkn;

/**
 * It opens the uinput device and it generates the token to use to talk with
 * the libuinput library.
 *
 * @param[in] path is the path to the uinput device. If NULL, the default is
 * /dev/uinput
 * @return It returns an uinput token to use for all operation on uinput
 */
extern struct uinput_tkn *uinput_open(char *path);

/**
 * It closes the uinput device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 */
extern void uinput_close(struct uinput_tkn *tkn);

/**
 * It creates a new uinput device based on the information within the data
 * structure uinput_user_dev. Remember, you must set the list of supported
 * events before create a new device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @param[in] dev is the uinput description of the new input device to create
 * @return it returns -1 on error and set errno
 *
 */
extern int uinput_create_new_device(struct uinput_tkn *tkn,
		struct uinput_user_dev *dev);

/**
 * It destroys the device associated to the token.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @return it returns -1 on error and set errno
 */
extern int uinput_destroy(struct uinput_tkn *tkn);

/**
 * It enables a type of event.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @param[in] type is the type of event to enable (read input.h for the list)
 * @return it returns -1 on error and set errno
 */
extern int uinput_enable_event(struct uinput_tkn *tkn, int type);

/**
 * It sets a valid event handled by the device that you are creating.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @param[in] type is the type of event to set (read input.h for the list)
 * @param[in] code is the code of the event to set
 * @return it returns -1 on error and set errno
 */
extern int uinput_set_valid_event(struct uinput_tkn *tkn, int type, int code);

/**
 * It sets valid events handled by the device that you are creating. It is like
 * uinput_set_valid_event() but it operates on an array of events.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @param[in] ev is the list of events
 * @param[in] n is the number of events in the list
 * @return it returns -1 on error and set errno
 */
extern int uinput_set_valid_events(struct uinput_tkn *tkn,
		struct input_event *ev, unsigned int n);

/**
 * It sends an event to the device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @param[in] event is the event to send to device
 * @return it returns -1 on error and set errno
 */
extern int uinput_send_event(struct uinput_tkn *tkn, struct input_event *event);

/**
 * It sends a list of events to the device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @param[in] event is the list of events to send to device
 * @param[in] n is the number of events in the list
 * @return it returns -1 on error and set errno
 */
extern int uinput_send_events(struct uinput_tkn *tkn, struct input_event *event,
		unsigned int n, int do_sync);


/**
 * It returns the event number associated to the uinput device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @return it returns the input device number associated to the given token.
 *         If the library cannot determines the device number, it returns -1.
 */
extern int uinput_get_input_no(struct uinput_tkn *tkn);

/**
 * It returns the event number associated to the uinput device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @return it returns the event device number associated to the given token.
 *         If the library cannot determines the device number, it returns -1.
 */
extern int uinput_get_event_no(struct uinput_tkn *tkn);

/**
 * It returns the string of the char device event associated to the uinput
 * device.
 *
 * @see uinput_open
 * @param[in] tkn is the library token created by uinput_open
 * @return it returns a pointer to the path string. If the library cannot
 *         determines the path, it returns NULL
 */
extern char *uinput_get_event_path(struct uinput_tkn *tkn);

#ifdef UINPUT_INTERNAL
/* Here are define private structures used within the library */

struct uinput_token {
	int fd; /** is the file descriptor used to open uinput device */
	int input_no; /** is the number of the input device created */
	int event_no; /** is the event number of the input device */
	char event_dev_path[128]; /** is the path to the event device */
	struct uinput_user_dev *dev; /** is the uinput descriptor for the new
					 device */
};
#endif /* UINPUT_INTERNAL */
#endif /* UINPUT_H */
