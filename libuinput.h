/*
 *  Copyright Â© 2013 Federico Vaga <federico.vaga@gmail.com>
 *  License: GPLv2
 */

#ifndef UINPUT_H
#define UINPUT_H

#define LIBUINPUT_VERSION 0.2

/*
 * uinput_tkn
 * It is the token generated by the library on uinput_open(). Your programs
 * must store this token and use it each time you need to access to the uinput
 * device associated to the token
 */
struct uinput_tkn;

/*
 * uinput_open
 * @path: path to the uinput device. If NULL, the default is /dev/uinput
 *
 * It opens the uinput device.
 * It returns an uinput token to use for all operation on uinput
 */
extern struct uinput_tkn *uinput_open(char *path);

/*
 * uinput_close
 * @tkn: the library token created by uinput_open
 *
 * It closes the uinput device
 */
extern void uinput_close(struct uinput_tkn *tkn);

/*
 * uinput_create_new_device
 * @tkn: the library token created by uinput_open
 * @dev: description of the new input device to create
 *
 * It creates a new uinput device based on the information within the data
 * structure uinput_user_dev. Remember, you must set the list of supported
 * events before create a new device.
 */
extern int uinput_create_new_device(struct uinput_tkn *tkn,
		struct uinput_user_dev *dev);

/*
 * uinput_destroy
 * @tkn: the library token created by uinput_open
 *
 * It destroys the device associated to the token
 */
extern int uinput_destroy(struct uinput_tkn *tkn);

/*
 * uinput_enable_event
 * @tkn: the library token created by uinput_open
 * @type: type of event to enable (read input.h for the list)
 *
 * It enables a type of event
 */
extern int uinput_enable_event(struct uinput_tkn *tkn, int type);

/*
 * uinput_enable_event
 * @tkn: the library token created by uinput_open
 * @type: type of event to set (read input.h for the list)
 * @code: code of the event
 *
 * It sets a valid event handled by the device that you are creating
 */
extern int uinput_set_valid_event(struct uinput_tkn *tkn, int type, int code);

/*
 * uinput_set_valid_events
 * @tkn: the library token created by uinput_open
 * @ev: list of events
 * @n: number of events in the list
 *
 * It sets valid events handled by the device that you are creating. It is like
 * uinput_set_valid_event() but it operates on an array of events
 */
extern int uinput_set_valid_events(struct uinput_tkn *tkn,
		struct input_event *ev, unsigned int n);

/*
 * uinput_send_event
 * @tkn: the library token created by uinput_open
 * @event: the event to send to device
 *
 * It sends an event to the device
 */
extern int uinput_send_event(struct uinput_tkn *tkn, struct input_event *event);

/*
 * uinput_send_events
 * @tkn: the library token created by uinput_open
 * @event: list of events to send to device
 * @n: number of events in the list
 *
 * It sends a list of events to the device
 */
int uinput_send_events(struct uinput_tkn *tkn, struct input_event *event,
		unsigned int n, int do_sync);


/*
 * uinput_get_event_no
 * @tkn: the library token created by uinput_open
 *
 * It returns the event number associated to the uinput device
 */
extern int uinput_get_input_no(struct uinput_tkn *tkn);

/*
 * uinput_get_event_no
 * @tkn: the library token created by uinput_open
 *
 * It returns the event number associated to the uinput device
 */
extern int uinput_get_event_no(struct uinput_tkn *tkn);

/*
 * uinput_get_event_path
 * @tkn: the library token created by uinput_open
 *
 * It returns the string of the char device event associated to the uinput
 * device
 */
extern char *uinput_get_event_path(struct uinput_tkn *tkn);

#ifdef UINPUT_INTERNAL
/* Here are define private structures used within the library */

struct uinput_token {
	int fd;
	int input_no;
	int event_no; /* XX number of event /dev/input/eventXX char device */
	char event_dev_path[128]; /* path to /dev/input/eventXX char device */
	struct uinput_user_dev *dev;
};
#endif /* UINPUT_INTERNAL */
#endif /* UINPUT_H */
